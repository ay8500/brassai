<?php

class MySqlDb {
  private $connection = NULL;
  private $result = NULL;
  private $counter=NULL;
 
 
  /* Constructor */
  public function __construct($host=NULL, $database=NULL, $user=NULL, $pass=NULL){
	$this->connection = mysqli_connect($host,$user,$pass,$database);
	if (mysqli_connect_errno()) {
		die('Database connection:'.$host. ":" . mysqli_error($this->connection));
	}
	//if (!is_resource($this->connection))	             die('Database connection: ' . mysqli_error($this->connection));
  	//if (!mysqli_select_db($database, $this->connection))	 die('Database connection: ' . mysqli_error());
  }
 
  /* "Destructor" */
  public function disconnect() {
    if (is_resource($this->connection))				
        mysqli_close($this->connection);
  }
  
  public function commit() {
  	return mysqli_commit($this->connection);
  }
  
 
  /* Execute a query get results with $this->fetchRow() and $this->count() */
  public function query($query) {
  	$this->result=mysqli_query($this->connection,$query)  or die(mysqli_error($this->connection));
  	$this->counter=NULL;
  }
  
  /* Execute a query that return a single iteger value */
  public function queryInt($query) {
  	$this->result=mysqli_query($this->connection,$query)  or die(mysqli_error($this->connection));
	//if(is_resource($this->result)) {
  		return $this->mysqli_result($this->result,0); 
	//}
	return 0;
  }

  /* Execute a query that return a single row*/
  public function querySignleRow($query) {
  	$this->result=mysqli_query($this->connection,$query)  or die(mysqli_error($this->connection));
  	if ($this->count()==1)
  		return $this->fetchRow();
  	else 
  		return array();
  }
  
  
  /* fech a query result row */	 
  public function fetchRow() {
  	return mysqli_fetch_assoc($this->result);
  }
  
  /* get result list as an array */
  public function getRowList() {
  		$ret=array();
  		while ($row = mysqli_fetch_assoc($this->result)) {
  			array_push($ret, $row);
  		}
  		return $ret;
  }
 
  /* howmanny rows are in the query result */
  public function count() {
  	if($this->counter==NULL && isset($this->result)) {
  		$this->counter=mysqli_num_rows($this->result);
  	}
 	return $this->counter;
  }

  /* select count */
  public function tableCount($table, $where="") {
    	if ($where=="")
    		$sql="select count(1) from ".$table;
    	else
    		$sql="select count(1) from ".$table." where ".$where;
		return $this->queryInt($sql);
  }

  /* the sum of one field in a table */
  public function tableSumField($table,$field, $where="") {
    	if ($where=="")
    		$sql="select sum(".$field.") from ".$table;
    	else
    		$sql="select sum(".$field.") from ".$table." where ".$where;
    	return $this->queryInt($sql);
  }

  /* the sum of a field multiplicated with an other field */
  public function tableSumMultField($table,$field, $multField, $where="") {
    	if ($where=="")
    		$sql="select sum(".$field." * ".$multField." ) from ".$table;
    	else
    		$sql="select sum(".$field." * ".$multField." )  from ".$table." where ".$where;
    	$this->result=mysqli_query($this->connection,$sql) or die(mysqli_error($this->connection));
  		return $this->queryInt($sql);
  }

  
  	/* Insert and update need a $data array for the values 
  	 * $data[0]["field"]='Fieldname';
  	 * $data[0]["type"]='s';            //Types s=string, d=datatime, n=number
  	 * $data[0]["value"]='value';
  	 * */
  
	/* Insert */ 
	public function insert($table, $data) {
	  	$sql  ="insert into `".$table."` (";
	  	foreach ($data as $i=>$d) {
	  		if ($i!=0) $sql .=",";
	  		$sql .="`".$d["field"]."`";
	  	}
		$sql .=") values (";
	  	foreach ($data as $i=>$d) {
			if ($i!=0) $sql .=",";

			if (isset($d["value"])) {
		  		if ($d["type"]!="n") $sql .="'";
		  		if ($d["type"]!="n") 
		  			$sql .=$this->replaceSpecialChars($d["value"]);
		  		else { 
			  		if ($data[$i]["value"]!="" )
		  				$sql .=$d["value"];
					else 
						$sql .=0;
		  		}
		  		if ($d["type"]!="n" ) $sql .="'";
			} else {
				$sql .="null";
			}
	  	}
		$sql .=")";
	    if ($this->result=mysqli_query($this->connection,$sql)) {
	   		return true;
	   	}
	   	else {
	   		 return false;
	   	}
	}

	/* Error message from last request */
	public function getErrorMessage() {
		mysqli_error($this->connection);
	}
	
	/* last autogenerated id */
	public function getInsertedId() {
		return mysqli_insert_id($this->connection);
	}
	
	
	/* Update */
	public function update($table, $data, $whereField="", $whereValue="") {
	  	$sql="update ".$table." set ";
	  	$notFirstElement=false;
	  	foreach ($data as $d) {
	  		if ($notFirstElement) $sql .=",";
	  		$notFirstElement = true;
	  		$sql .="`".$d["field"]."`=";
	  		if(isset($d["value"])) {
		  		if ($d["type"]!="n") $sql .="'";
		  		if ($d["type"]!="n") 
		  			$sql .=$this->replaceSpecialChars($d["value"]);
		  		else { 
			  		if ($d["value"]!="")
		  				$sql .=$d["value"];
					else
						$sql .=0;
		  		}
		  		if ($d["type"]!="n") $sql .="'";
	  		} else {
	  			$sql .="null";
	  		}
	  	}
	  	if ($whereField!="") {
			$sql.=" where ".$whereField."=".$whereValue;
	  	}
	  	
	   	if ($this->result=mysqli_query($this->connection,$sql)) {
	   		return true;
	   	}
	   	else {
	   		return false;
	   	}
	}
   	  
	/* delete */
   	public function delete($table, $whereField, $whereValue) {
   	  	$sql="delete from ".$table." where ".$whereField."=".$whereValue;
   	  	if ($this->result=mysqli_query($this->connection,$sql)) {
   	  		return true;
   	  	}
   	  	else {
   	  		return false;
   	  	}
	}
	
   	  
	public function getNextAutoIncrement($table) {
		$sql="SELECT Auto_increment FROM information_schema.tables WHERE table_name='".$table."'";
		return $this->queryInt($sql);
	}
   	  
	private function mysqli_result($res, $row, $field=0) {
   	  	$res->data_seek($row);
   	  	$datarow = $res->fetch_array();
   	  	return $datarow[$field];
	}
   	  
	public function replaceSpecialChars($s) {
   	  	return str_replace("'", "&Apos;", $s);
	}
	
	public function rereplaceSpecialChars($s) {
		return str_replace("&Apos;", "'", $s);
	}
	
	public function createFieldArray($type,$name,$value) {
		$ret = array();
		$ret["field"]=$name;
		$ret["type"]=$type;
		$ret["value"]=$value;
		return $ret;
	}
   	  
	public function insertFieldInArray($array,$fieldName,$fieldValue) {
		$type=null;
		//Ends with id, year oder start with is => integer
		if (preg_match('/id\\z/i', $fieldName)  || preg_match('/Year\\z/', $fieldName)  || preg_match('/\\Ais/', $fieldName) ) {
			$type="n";}
		//Ends with date => date
		else if (preg_match('/Date\\z/i', $fieldName)) {
			$type="d";}
		//its a string
		else /*if ($fieldValue!=null) */{
			$type="s";
			$fieldValue=$this->replaceSpecialChars($fieldValue);
		}
		if ($type!=null) {
			$ret = array();
			$ret["field"]=$fieldName;
			$ret["type"]=$type;
			$ret["value"]=$fieldValue;
			array_push($array, $ret);
		}
		return $array;
	}
	
	public function changeFieldInArray($fieldArray,$fieldName,$fieldValue) {
		$arrayIdx = array_search($fieldName, array_column($fieldArray,"field"));
		if (!$arrayIdx===false) {
			$fieldArray[$arrayIdx]["value"]=$fieldValue;
			return $fieldArray;
		} else {
			return $this->insertFieldInArray($fieldArray,$fieldName,$fieldValue);
		}
	}

	public function deleteFieldInArray($fieldArray,$fieldName) {
		$arrayIdx = array_search($fieldName, array_column($fieldArray,"field"));
		if (!$arrayIdx===false) {
			unset($fieldArray[$arrayIdx]);
		}
		return $fieldArray;
	}
	
	
	public function setFieldInArrayToNull($fieldArray,$fieldName) {
		$arrayIdx = array_search($fieldName, array_column($fieldArray,"field"));
		if (!$arrayIdx===false) {
			unset($fieldArray[$arrayIdx]["value"]);
		} 
		return $fieldArray;
	}
	
	
	
}
?>